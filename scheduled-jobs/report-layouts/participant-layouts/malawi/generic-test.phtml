<?php

use mitoteam\jpgraph\MtJpGraph;

MtJpGraph::load(['bar', 'line', 'pie'], true);
$monochromaticColors = ['black', 'darkgray', 'gray', 'lightgray', 'dimgray', 'gainsboro', 'slategray', 'silver'];
require_once(CRON_PATH . DIRECTORY_SEPARATOR . 'Common.php');
$general = new Common();
$schemeType = $resultArray['shipment'][0]['scheme_type'];
$pdfNew = new Zend_Pdf();
$extractor = new Zend_Pdf_Resource_Extractor();
$font = Zend_Pdf_Font::fontWithName(Zend_Pdf_Font::FONT_HELVETICA);
$shipmentCode = '';

$config = new Zend_Config_Ini(APPLICATION_PATH . DIRECTORY_SEPARATOR . "configs" . DIRECTORY_SEPARATOR . "config.ini", APPLICATION_ENV);
if (sizeof($resultArray['shipment']) > 0) {

    $totalPages = count($resultArray['shipment']);
    $j = 1;

    foreach ($resultArray['shipment'] as $result) {
        $shipmentAttributes = json_decode($result['shipment_attributes'], true);

        $methodOfEvaluation = isset($shipmentAttributes['methodOfEvaluation']) ? $shipmentAttributes['methodOfEvaluation'] : 'standard';

        if ( /*(isset($result['responseResult'][0]['is_excluded']) && $result['responseResult'][0]['is_excluded'] == 'yes') || */
            (isset($result['responseResult'][0]['is_pt_test_not_performed']) && $result['responseResult'][0]['is_pt_test_not_performed'] == 'yes')
        ) {
            continue;
        }

        if (!file_exists($reportsPath . DIRECTORY_SEPARATOR . $result['shipment_code']) && !is_dir($reportsPath . DIRECTORY_SEPARATOR . $result['shipment_code'])) {
            mkdir($reportsPath . DIRECTORY_SEPARATOR . $result['shipment_code']);
        }
        //error_log($i);
        // Extend the TCPDF class to create custom Header and Footer

        // create new PDF document
        $reportFormat = $reportService->getReportConfigValue('report-format');
        $shipmentAttributes = json_decode($result['shipment_attributes'], true);
        $panelName = (isset($shipmentAttributes['panelName']) && !empty($shipmentAttributes['panelName'])) ? $shipmentAttributes['panelName'] : $result['scheme_name'];

        if (isset($reportFormat) && !empty($reportFormat)) {
            $pdf = new FPDIReport(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            $pdf->setParams($resultStatus, $evalRow['date_finalised'], $config, $watermark, "INDIVIDUAL", $layout, $panelName);
        } else {
            $pdf = new IndividualPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
            $attributes = json_decode($result['attributes'], true);
            $pdf->setSchemeName($header, $panelName, $logo, $logoRight, $resultStatus, 'generic-test', 'generic-test', $evalRow['date_finalised'], "", $watermark, "", $instituteAddressPosition);
        }

        // set document information
        //$pdf->SetCreator(PDF_CREATOR);
        //$pdf->SetAuthor('ePT');
        //$pdf->SetTitle('DEPARTMENT OF HEALTH AND HUMAN SERVICES');

        // set default header data
        $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);

        // set header and footer fonts
        $pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
        $pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

        // set default monospaced font
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

        // set margins
        $mt = 40;
        if (isset($templateTopMargin) && !empty($templateTopMargin)) {
            $mt = $templateTopMargin;
        }
        $pdf->SetMargins(PDF_MARGIN_LEFT, $mt, PDF_MARGIN_RIGHT);
        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

        // set auto page breaks
        $pdf->SetAutoPageBreak(true, PDF_MARGIN_BOTTOM);

        // set image scale factor
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

        // ---------------------------------------------------------

        // set font
        $pdf->SetFont('freesans', '', 11);

        // add a page
        $pdf->AddPage('P', 'A4');

        /* $htmlTitle = '<span style="font-weight: bold;text-align:center;font-size:11;">Proficiency Testing Program for ' . $panelName . '</span><br>';
        $pdf->writeHTML($htmlTitle, true, false, true, false, ''); */

        // set some text to print
        //$txt = <<<EOD
        //International Laboratory Branch
        //
        //Custom page header and footer are defined by extending the TCPDF class and overriding the Header() and Footer() methods.
        //EOD;
        //
        //// print a block of text using Write()
        //$pdf->Write(0, $txt, '', 0, 'C', true, 0, false, false, 0);

        // ---------------------------------------------------------

        if (trim($result['shipment_date'] ?? '') != "") {
            $result['shipment_date'] = Pt_Commons_General::humanReadableDateFormat($result['shipment_date']);
        }
        if (trim($result['lastdate_response'] ?? '') != "") {
            $result['lastdate_response'] = Pt_Commons_General::humanReadableDateFormat($result['lastdate_response']);
        }

        $responseDate = "";
        $shipmentTestDate = "";
        $distributionDate = "";
        $shipmentTestReportDate = "";
        $shipmentScore = 0;
        $documentationScore = 0;
        $score = 0;
        $otherTestsPossibleResults =  $schemeService->getPossibleResults($schemeType);
        $otherTestPossibleResults = [];
        foreach ($otherTestsPossibleResults as $row) {
            $otherTestPossibleResults[$row['result_code']] = $row['response'];
        }
        /* for Shipment attributes functionality end */
        if (isset($result['responseResult'][0]['responseDate']) && trim($result['responseResult'][0]['responseDate']) != "") {
            $splitDate = explode(" ", $result['responseResult'][0]['responseDate']);
            $responseDate = Pt_Commons_General::humanReadableDateFormat($splitDate[0]);
        }
        $attributes = '';
        if (isset($result['attributes'])) {
            $attributes = json_decode($result['attributes'], true);
        }

        $shipmentReceiptDate = "";
        if (isset($result['responseResult'][0]['shipment_receipt_date']) && trim($result['responseResult'][0]['shipment_receipt_date']) != "") {
            $shipmentReceiptDate = Pt_Commons_General::humanReadableDateFormat($result['responseResult'][0]['shipment_receipt_date']);
        }

        if (isset($result['responseResult'][0]['shipment_test_date']) && trim($result['responseResult'][0]['shipment_test_date']) != "") {
            $shipmentTestDate = Pt_Commons_General::humanReadableDateFormat($result['responseResult'][0]['shipment_test_date']);
        }

        if (isset($result['responseResult'][0]['responseDate']) && trim($result['responseResult'][0]['responseDate']) != "") {
            $shipmentTestReportDate = Pt_Commons_General::humanReadableDateFormat($result['responseResult'][0]['responseDate']);
        }
        if (isset($result['distribution_date']) && trim($result['distribution_date']) != "") {
            $distributionDate = Pt_Commons_General::humanReadableDateFormat($result['distribution_date']);
        }
        // PT Co-ordinator header details start
        $approveTxt = $result['pt_co_ordinator_name'] ?? $evalRow['saname'];
        $reportType = ($resultStatus == 'finalized') ? 'Finalized' : '';

        $labInfo = '<span style="font-weight:bold;"> ' . $evalRow['scheme_name'] . ' Participant ' . $reportType . ' Report</span></br>';
        $labInfo .= '<hr>';
        $labInfo .= '<p style="text-align:right;font-size:11px;">';
        if (isset($result['pt_co_ordinator_name']) && !empty($result['pt_co_ordinator_name'])) {
            $labInfo .= '<b>PT Scheme Manager: </b> ' . $result['pt_co_ordinator_name'] . '<br>';
        }
        if (isset($result['pt_co_ordinator_email']) && !empty($result['pt_co_ordinator_email'])) {
            $labInfo .= '<b>Email: </b> ' . $result['pt_co_ordinator_email'] . '<br>';
        }
        if (isset($result['pt_co_ordinator_phone']) && !empty($result['pt_co_ordinator_phone'])) {
            $labInfo .= '<b>Cell. </b> ' . $result['pt_co_ordinator_phone'] . '<br>';
        }
        if (isset($approveTxt) && !empty($approveTxt)) {
            $labInfo .= '<b>Report Authorized by: </b>' . $approveTxt;
        }
        $labInfo .= '</p>';
        $labInfo .= '<hr><br>';
        // PT Co-ordinator header details end
        $result['mobile'] = $result['mobile'] ?? '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ';
        $result['email'] = $result['email'] ?? '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ';
        $labInfo .= '<table cellpadding="3" style="width:830px;font-size:11px;">';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Facility Identification Code</strong> : ' . $result['labName'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>District</strong> : ' . $result['district'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Survey Shipment date</strong> : ' . $result['shipment_date'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Date Received</strong> : ' . $shipmentReceiptDate . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Date Tested</strong> : ' . $shipmentTestDate . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Survey Closing Date</strong> : ' . $distributionDate . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Report Date</strong> : ' . $commonService->humanReadableDateFormat(date('d-m-Y')) . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Name of Tester</strong> : ' . $result['first_name'] . " " . $result['last_name'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Tester Id (in case of tester’s enrollment)</strong> : ' . $result['unique_identifier'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Results Submitted Date</strong> : ' . $responseDate . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Analyst Name </strong> : ' . $attributes['analyst_name'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Kit Name </strong> : ' . $attributes['kit_name'] . '</td>';
        $labInfo .= '</tr>';

        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Kit Lot Number </strong> : ' . $attributes['kit_lot_number'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Kit Expiry Date </strong> : ' . Pt_Commons_General::humanReadableDateFormat($attributes['kit_expiry_date'])  . '</td>';
        $labInfo .= '</tr>';

        $labInfo .= '<tr>';
        $labInfo .= '	<td><strong>Cell</strong> : ' . $result['mobile'];
        $labInfo .= '	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Email</strong> : ' . $result['email'] . '</td>';
        $labInfo .= '</tr>';
        $labInfo .= '</table>';

        /* Response result section */
        $jsonConfig = Zend_Json_Decoder::decode($result['user_test_config'], true);
        $passPercentage = $jsonConfig['passingScore'] ?? 100;
        $pdf->writeHTML($labInfo, true, false, true, false, '');
        if (isset($result['responseResult']) && !empty($result['responseResult'])) {
            $labRes = '<span style="font-weight: bold;font-size:13px;">Your laboratory test results : <br/></span>';
            $labRes .= '<table border="1" style="font-size:11px;" cellpadding="3" style="width:100%;">';
            $labRes .= '<tr style="background-color:#dbe4ee;width:100%;">';
            $labRes .= '<td style="text-align:center;font-weight:bold;">Sample ID</td>';
            $labRes .= '<td style="text-align:center;font-weight:bold;">Expected Results</td>';
            $labRes .= '<td style="text-align:center;font-weight:bold;">Your Results</td>';
            $labRes .= '<td style="text-align:center;font-weight:bold;">Score</td>';
            $labRes .= '<td style="text-align:center;font-weight:bold;">Evaluation</td>';
            $labRes .= '</tr>';

            $successRate = 0;
            //Sample codes
            foreach ($result['responseResult'] as $key => $response) {
                $labRes .= '<tr>';
                $labRes .= '<td style="text-align:center;font-weight:bold;">' . $response['sample_label'] . '</td>';
                $labRes .= '<td style="text-align:center;">' . ucwords($otherTestPossibleResults[$response['reference_result']] ?? '') . '</td>';
                $labRes .= '<td style="text-align:center;">' . ucwords($otherTestPossibleResults[$response['reported_result']] ?? '') . '</td>';
                $labRes .= '<td style="text-align:center;">' . $response['calculated_score'] . '</td>';

                $evaluationScore = $passPercentage / $result['number_of_samples'];
                $evaluationResult = ($response['calculated_score'] >= $evaluationScore) ? 'Acceptable' : 'Unacceptable';
                // $labRes .= '<td style="text-align:center;">' . number_format(($response['calculated_score'] / (20 * count($result['responseResult']))) * 100, 2) . '%</td>';
                $labRes .= '<td style="text-align:center;">' . $evaluationResult . '</td>';
                $labRes .= '</tr>';

                if ($evaluationResult == 'Acceptable') {
                    $successRate++;
                }
            }

            $labRes .= '</table>';

            $pdf->SetLeftMargin(15);
            $pdf->writeHTML($labRes, true, false, true, false, '');
        }

        if ($result['is_excluded'] == 'yes') {
            $wishes = '<p>Your response was not considered for evaluation</p>';
        } else {
            $totalScore = $result['shipment_score'] + $result['documentation_score'];
            if ($totalScore >= $passPercentage) {
                $accuracy = (($successRate / count($result['responseResult'])) * 100);
                // $wishes = '<p style="font-size:12px;margin-top:-20px;">Congratulations! You have received a satisfactory score of ' . round($totalScore, 2) . '%</p><br><br>';
                $wishes = '<p style="font-size:11px;"><strong>Total score</strong> ' . round($totalScore) . ' <strong>out of 100</strong><br>';
                $wishes .= '<strong>Accuracy:</strong> ' . $accuracy . '%.<br>';
                $wishes .= '<strong>Mean score for all Reporting Providers:</strong> ' . round($resultArray['meanScore']['mean_score'], 2) . '.<br>';
                $wishes .= 'Method of Data evaluation is Non parametric(Qualitative)</p>';
            } else {
                $wishes = '<p style="font-size:11px;margin-top:-20px;">You have received a score of ' . round($totalScore, 2) . '%</p><br><br>';
            }
        }
        $pdf->SetLeftMargin(15);
        $pdf->writeHTML($wishes, true, false, true, false, '');

        //----------------Summary Statistics for this survey  start----------------
        if (isset($result['statistics']) && !empty($result['statistics'])) {
            $score = (isset($config->evaluation->$schemeType->passPercentage) && !empty($config->evaluation->$schemeType->passPercentage) && $config->evaluation->dts->passPercentage > 0) ? $config->evaluation->$schemeType->passPercentage : '80';
            $ppOverview = '<span style="font-size:12px;font-weight:bold;">Summary Statistics for this survey</span><br/>';
            $ppOverview .= '<table border="1" style="font-size:12px;">';
            $ppOverview .= '<tr style="background-color:#dbe4ee;">';
            $ppOverview .= '    <td style="background-color:#dbe4ee;text-align:center;"># of Providers that responded</td>';
            $ppOverview .= '    <td style="background-color:#dbe4ee;text-align:center;">Providers with 100%</td>';
            $ppOverview .= '    <td style="background-color:#dbe4ee;text-align:center;">Providers with >= ' . $score . '%</td>';
            $ppOverview .= '    <td style="background-color:#dbe4ee;text-align:center;">Providers with < ' . $score . '%</td>';
            $ppOverview .= '    <td style="background-color:#dbe4ee;text-align:center;">Providers that did not Respond</td>';
            $ppOverview .= '</tr>';

            $ppOverview .= '<tr>';
            $ppOverview .= '    <td style="text-align:center;font-weight:normal;">' . $result['statistics']['number_responded'] . '</td>';
            $ppOverview .= '    <td style="text-align:center;font-weight:normal;">' . $result['statistics']['providersWith100'] . '</td>';
            $ppOverview .= '    <td style="text-align:center;font-weight:normal;">' . $result['statistics']['providers>80'] . '</td>';
            $ppOverview .= '    <td style="text-align:center;font-weight:normal;">' . $result['statistics']['providers<80'] . '</td>';
            $ppOverview .= '    <td style="text-align:center;font-weight:normal;">' . $result['statistics']['number_not_responded'] . '</td>';
            $ppOverview .= '</tr>';

            $ppOverview .= '</table><br>';
            $pdf->writeHTML($ppOverview, true, false, true, false, '');
        }
        //----------------Summary Statistics for this survey  Ends----------------

        $performance1 = $performance2 = $performance3 = false;
        if (isset($result['performance1']) && !empty($result['performance1'])) {
            $performance1 = true;
            $dataX = [];
            $dataY = [];
            foreach ($result['performance1'] as $key => $val) {
                $dataX[] = $val['scored'];
                $dataY[] = $val['distribution_code'];
            }
            // Create the graph. These two calls are always required
            $graph = new Graph(680, 250, 'auto');
            $graph->SetScale("textlin");

            $graph->SetBox(false);
            $graph->SetMargin(80, 30, 10, 50);

            $graph->ygrid->SetFill(false);
            $graph->xaxis->SetTickLabels($dataY);
            $graph->xaxis->SetPos(0.5);

            $graph->yaxis->HideLine(false);
            $graph->yaxis->HideTicks(false, false);
            $graph->yaxis->scale->SetAutoMin(0);
            $graph->yaxis->scale->SetAutoMax(100);
            // Create the bar plots
            $b1plot = new BarPlot($dataX);
            // Create the grouped bar plot
            $gbplot = new GroupBarPlot(array($b1plot));
            // ...and add it to the graPH
            $graph->Add($gbplot);
            $b1plot->value->Show();
            $b1plot->value->SetColor("black", "darkred");

            $b1plot->SetFillColor('#4F81BD');
            $b1plot->SetColor("white");
            $graph->title->Set("Your Performance");
            $graph->xaxis->title->Set('PT Surveys');
            $graph->yaxis->title->Set('Number of Participants');
            $graph->yaxis->SetPos('min');

            $graph->xaxis->title->SetFont(FF_FONT1, FS_BOLD);
            $graph->yaxis->title->SetFont(FF_FONT1, FS_BOLD);
            $graph->yaxis->SetTitleMargin(40);
            $graph->xaxis->SetTitleMargin(15);
            // Turn the tick mark out from the plot area
            $graph->xaxis->SetTickSide(SIDE_DOWN);
            $graph->yaxis->SetTickSide(SIDE_LEFT);

            $image_file = $reportsPath . DIRECTORY_SEPARATOR . $resultArray['shipment']['shipment_code'] . DIRECTORY_SEPARATOR . 'bar_chart.png';
            $graph->img->SetImgFormat('png'); // Ensure PNG format for better quality
            $graph->img->SetQuality(100); // Set the highest quality
            $graph->Stroke($image_file);
            $pdf->Image($image_file, 5, $pdf->getY(), '', '', '', '', '', false, 600);
            if (file_exists($image_file)) {
                unlink($image_file);
            }
        }
        if (isset($result['performance2']) && !empty($result['performance2'])) {
            $performance2 = true;
            $data1y = $data2y = $label = [];
            foreach ($result['performance2'] as $row) {
                $data1y[] = $row['passed'];
                $data2y[] = $row['failed'];
                $label[] = $row['sample_label'];
            }
            // Create the graph. These two calls are always required
            $graph = new Graph(680, 250, 'auto');
            $graph->SetScale("textlin");

            $graph->SetBox(false);
            $graph->SetMargin(80, 30, 10, 50);
            $graph->ygrid->SetFill(false);
            $graph->xaxis->SetTickLabels($label);

            $graph->xaxis->title->SetFont(FF_FONT1, FS_BOLD);
            $graph->yaxis->title->SetFont(FF_FONT1, FS_BOLD);
            $graph->xaxis->HideLine(false);
            $graph->yaxis->HideLine(false);
            $graph->xaxis->HideTicks(false, false);
            $graph->yaxis->HideTicks(false, false);
            $graph->xaxis->SetPos(0.5);

            // Create the bar plots
            $b1plot = new BarPlot($data1y);
            $b2plot = new BarPlot($data2y);
            // Create the grouped bar plot
            $gbplot = new GroupBarPlot(array($b1plot, $b2plot));
            // ...and add it to the graPH
            $graph->Add($gbplot);
            $b1plot->value->Show();
            $b1plot->value->SetColor("black", "darkred");
            $b2plot->value->Show();
            $b2plot->value->SetColor("darkred", "black");

            $b1plot->SetFillColor("darkgreen");
            $b1plot->SetColor("white");

            $b2plot->SetFillColor("red");
            $b2plot->SetColor("white");

            $b1plot->SetFillColor('#4F81BD');
            $b1plot->SetColor("white");
            $graph->title->Set("Performance of Current Survey Panels");
            $graph->yaxis->title->Set('Number of Participants');
            $graph->xaxis->title->Set('Samples');
            $graph->yaxis->SetTitleMargin(40);
            $graph->xaxis->SetTitleMargin(15);
            $graph->xaxis->SetTickSide(SIDE_DOWN);
            $graph->yaxis->SetTickSide(SIDE_LEFT);
            // Display the graph
            $performance_of_current_survey_anels = $reportsPath . DIRECTORY_SEPARATOR . $result['shipment_code'] . DIRECTORY_SEPARATOR . 'performance_of_current_survey_anels.png';
            $graph->img->SetImgFormat('png'); // Ensure PNG format for better quality
            $graph->img->SetQuality(100); // Set the highest quality
            $graph->Stroke($performance_of_current_survey_anels);
            $addPoint = 0;
            if ($performance1) {
                $addPoint = 70;
            }
            $pdf->Image($performance_of_current_survey_anels, 5, ($pdf->getY() + $addPoint), '', '', '', '', '', false, 600);
            if (file_exists($performance_of_current_survey_anels)) {
                unlink($performance_of_current_survey_anels);
            }
        }
        if (isset($result['performance3']) && !empty($result['performance3'])) {
            $performance3 = true;
            $data1y = $data2y = $label = [];
            foreach ($result['performance3'] as $row) {
                $data1y[] = $row['passed'];
                $data2y[] = $row['failed'];
                $label[] = $row['distribution_code'];
            }
            // Create the graph. These two calls are always required
            $graph = new Graph(680, 250, 'auto');
            $graph->SetScale("textlin");

            $graph->SetBox(false);
            $graph->SetMargin(80, 30, 10, 50);
            $graph->ygrid->SetFill(false);
            $graph->xaxis->SetTickLabels($label);

            $graph->xaxis->title->SetFont(FF_FONT1, FS_BOLD);
            $graph->yaxis->title->SetFont(FF_FONT1, FS_BOLD);
            $graph->xaxis->HideLine(false);
            $graph->yaxis->HideLine(false);
            $graph->xaxis->HideTicks(false, false);
            $graph->yaxis->HideTicks(false, false);
            $graph->xaxis->SetPos(0.5);

            // Create the bar plots
            $b1plot = new BarPlot($data1y);
            $b2plot = new BarPlot($data2y);
            // Create the grouped bar plot
            $gbplot = new GroupBarPlot(array($b1plot, $b2plot));
            // ...and add it to the graPH
            $graph->Add($gbplot);
            $b1plot->value->Show();
            $b1plot->value->SetColor("black", "darkred");
            $b2plot->value->Show();
            $b2plot->value->SetColor("darkred", "black");

            $b1plot->SetFillColor("darkgreen");
            $b1plot->SetColor("white");

            $b2plot->SetFillColor("red");
            $b2plot->SetColor("white");

            $b1plot->SetFillColor('#4F81BD');
            $b1plot->SetColor("white");
            $graph->title->Set("Performance of Surveys");
            $graph->yaxis->title->Set('Number of Participants');
            $graph->xaxis->title->Set('PT Surveys');
            $graph->yaxis->SetTitleMargin(40);
            $graph->xaxis->SetTitleMargin(15);
            $graph->xaxis->SetTickSide(SIDE_DOWN);
            $graph->yaxis->SetTickSide(SIDE_LEFT);

            // Display the graph
            $performance_of_surveys = $reportsPath . DIRECTORY_SEPARATOR . $result['shipment_code'] . DIRECTORY_SEPARATOR . 'performance_of_surveys.png';
            $graph->img->SetImgFormat('png'); // Ensure PNG format for better quality
            $graph->img->SetQuality(100); // Set the highest quality
            $graph->Stroke($performance_of_surveys);
            $addPoint = 0;
            if ($performance1) {
                $addPoint = 70;
            }
            if ($performance2 && !$performance1) {
                $addPoint = 70;
            } else if ($performance2) {
                $addPoint = 140;
            }
            $pdf->Image($performance_of_surveys, 5, ($pdf->getY() + $addPoint), '', '', '', '', 'C', false, 200);
            if (file_exists($performance_of_surveys)) {
                unlink($performance_of_surveys);
            }
        }

        //if(trim($result['distribution_date'])!=""){
        //    $result['distribution_date']=Pt_Commons_General::humanReadableDateFormat($result['distribution_date']);
        //}
        if (trim($result['evaluationComments']) != "" || trim($result['optional_eval_comment']) != "") {
            $comment = '<table border="1" style="width:100%;font-size:12px;" cellpadding="3">';

            if (trim($result['evaluationComments']) != "") {
                $comment .= '<tr>';
                $comment .= '<td style="font-weight:bold;width:30%;">Evaluation Comments </td>';
                $comment .= '<td style="width:70%;">' . $result['evaluationComments'] . '</td>';
                $comment .= '</tr>';
            }

            if (trim($result['optional_eval_comment']) != "") {
                $comment .= '<tr>';
                $comment .= '<td style="font-weight:bold;width:30%;">Specific Comments/Feedback</td>';
                $comment .= '<td style="width:70%;">' . $result['optional_eval_comment'] . '</td>';
                $comment .= '</tr>';
            }

            $comment .= '</table>';
            //$pdf->SetTopMargin(13);
            $pdf->writeHTML($comment, true, false, true, false, '');
        }
        $br = '';
        if ($performance1 || $performance2 || $performance3) {
            $br = '<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>';
        }
        $html = $br . '<p style="font-size:11px;">Thank you for participating in HIV-1 Proficiency Testing Program for ' . $panelName . '.</p>';
        if (!empty($reportComment)) {
            $html .= '<br>' . $reportComment;
        }
        $pdf->writeHTML($html, true, false, true, false, '');

        if (!empty(trim($result['shipment_comment']))) {
            $comment = '<table border="1" style="width:100%;" cellpadding="3">';

            $comment .= '<tr>';
            $comment .= '<td style="font-size:10px;font-weight:bold;" colspan="2">' . $result['shipment_comment'] . '</td>';
            $comment .= '</tr>';

            $comment .= '</table>';
            //$pdf->SetTopMargin(13);
            $pdf->writeHTML($comment, true, false, true, false, '');
        }

        $eodReportText = "End of report";
        if ($evalRow['report_type'] == 'finalized') {
            $eodReportText = "End of final report";
        }
        $html = '<p style="font-size:11px;text-align:center;font-weight:bold;"><u>' . $eodReportText . '</u>.</p>';
        $html .= '<p style="font-size:11px;font-weight:bold;"><i>This is the confidential report that summarizes your performance.</i></p>';
        if (trim($result['shipment_comment']) != "") {
            $html .= '<p style="font-size:11px;"><b>Scheme Manager`s Comments:</b> ' . $result['shipment_comment'] . '</p>';
        }
        $html .= '<p style="font-size:11px;font-weight:bold;text-align:center;"><i>NPH PT all rights reserved.</i></p>';
        $html .= '<p style="font-size:11px;font-weight:bold;">Report Print Date: ' . $commonService->humanReadableDateFormat(date('d-m-Y')) . '</p>';

        $pdf->writeHTML($html, true, false, true, false, '');

        if (ob_get_contents()) {
            ob_end_clean();
        }

        //Close and output PDF document
        if (isset($result['last_name']) && trim($result['last_name']) != "") {
            $result['last_name'] = "_" . $result['last_name'];
        }

        $nameParts = [];
        $keys = ['shipment_code', 'unique_identifier', 'region', 'state', 'district', 'city'];

        foreach ($keys as $key) {
            if (!empty($result[$key]) && strtoupper($result[$key]) != 'NULL') {
                $nameParts[] = ($key == 'shipment_code') ? $result[$key] : strtoupper($result[$key]);
            }
        }

        $fileName = implode("-", $nameParts) . "-" . $result['map_id'];
        $fileName = $general->makeFileNameFriendly($fileName) . ".pdf";
        $filePath = $reportsPath . DIRECTORY_SEPARATOR . $result['shipment_code'] . DIRECTORY_SEPARATOR . $fileName;
        $created = $pdf->Output($filePath, "F");
        // $pdf->Output($fileName, 'I');

        $loadpdf = Zend_Pdf::load($filePath);

        foreach ($loadpdf->pages as $page) {
            $pdfExtract = $extractor->clonePage($page);
            //$pdfExtract->setFont($font, 8) ->drawText('Page '.$j.' / '.$totalPages, 280, 50);
            $pdfNew->pages[] = $pdfExtract;
        }
        $shipmentCode = $result['shipment_code'];
        $j++;
    }
}
