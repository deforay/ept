<?php
$modules = [];
foreach ($this->schemes as $scheme) {
    $modules[] = $scheme['scheme_id'];
}
$conf = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', APPLICATION_ENV);
$eptDomain = parse_url($conf->domain, PHP_URL_HOST);
?>
<style>
    :focus-visible {
        outline: none !important;
    }
</style>
<link rel="stylesheet" href="<?php echo $this->baseUrl('css/daterangepicker.css'); ?>" type="text/css" media="all">
<script type="text/javascript" src="<?php echo $this->baseUrl('js/jquery3.min.js'); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl('js/moment.min.js'); ?>"></script>
<link rel="stylesheet" type="text/css" href="<?php echo $this->baseUrl('css/bootstrap-select.min.css'); ?>" />
<link rel="stylesheet" type="text/css" href="<?php echo $this->baseUrl('css/multi-select.css'); ?>" />
<link href="<?php echo $this->baseUrl('css/select2.css'); ?>" rel="stylesheet" />
<div class="well">
    <form name="emailParticipantForm" id="emailParticipantForm" method="post" action="<?php echo $this->url(array("module" => "admin", "controller" => "email-participants", "action" => "index"), 'default', true) ?>" class="form-horizontal" role="form">
        <fieldset>
            <legend><?= $this->translate->_("Email Participants"); ?></legend>
            <div class="form-group">
                <label for="templates" class="col-lg-2 control-label"><?= $this->translate->_("Template"); ?></label>
                <div class="col-lg-10">
                    <select id="templates" name="templates" class="form-control" title="Please select template to fill the form" onchange="fillTemplate(this.value);">
                        <option value="">--<?= $this->translate->_("Select"); ?>--</option>
                        <?php if (isset($this->templates) && !empty($this->templates)) {
                            foreach ($this->templates as $row) {
                                if (isset($row['mail_purpose']) && !empty($row['mail_purpose'])) { ?>
                                    <option value="<?php echo $row['mail_purpose']; ?>"><?php echo ucwords(str_replace("_", " ", $row['mail_purpose'])); ?></option>
                        <?php }
                            }
                        } ?>
                    </select>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="dateRange" class="col-lg-4 control-label"><?= $this->translate->_("Date Range"); ?> <span class="mandatory">*</span></label>
                        <div class="col-lg-8">
                            <input type="text" id="dateRange" name="dateRange" class="form-control input-sm" readonly="readonly" style="background: #fff" placeholder="Click here to pick a Date Range" onchange="getShipmentCodes();" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="shipments" class="col-lg-4 control-label"><?= $this->translate->_("Shipment Code"); ?> <span class="mandatory">*</span></label>
                        <div class="col-lg-8">
                            <select id="shipments" name="shipments[]" data-live-search="true" class="form-control" multiple="multiple" data-selected-text-format="count>3" placeholder="Select shipments" title="Please select one or more shipments"></select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 form-check" style=" left: 17%; ">
                    <input type="checkbox" name="skipEmail" id="skipEmail" class="form-check-input" value="on" checked>
                    <label for="skipEmail" class="form-check-label"><?= $this->translate->_("Skip emails with") . " @" . $eptDomain; ?></label>
                </div>
            </div>
            <hr>
            <div class="form-group">
                <label for="sendMail" class="col-lg-2 control-label"><?= $this->translate->_("To"); ?> <span class="mandatory">*</span></label>
                <div class="col-lg-10">
                    <select id="sendMail" name="sendMail[]" class="form-control" multiple="multiple" data-selected-text-format="count>3" placeholder="Select option" title="Please select one or more option">
                        <option value="participant">Participants</option>
                        <option value="datamanager">Data Managers</option>
                        <?php if (in_array('tb', $modules)) { ?>
                            <option value="ptcc">PTCC Managers</option>
                        <?php } ?>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="subject" class="col-lg-2 control-label"><?= $this->translate->_("Subject"); ?></label>
                <div class="col-lg-10">
                    <input type="text" name="subject" id="subject" class="js-example-basic-multiple form-control" placeholder="Please enter subject" title="Please enter subject" onchange="getSubjectList(this);">
                </div>
            </div>

            <div class="form-group">
                <label for="message" class="col-lg-2 control-label"><?= $this->translate->_("Mail Content"); ?><span class="mandatory">*</span></label>
                <div class="col-lg-10">
                    <div id="messageEditor" name="messageEditor" class="richtextarea form-control" title="Please enter a Mail Content" placeholder="Enter the Mail Content">
                    </div>
                    <textarea style="display:none;" id="message" name="message"></textarea>
                </div>
            </div>
            <div class="form-group">
                <label for="message" class="col-lg-2 control-label"><?= $this->translate->_("Key"); ?></label>
                <div class="col-lg-10">
                    <span class="help-block"><?= $this->translate->_("Lab Name/Participant Name"); ?> : ##NAME##</span>
                    <span class="help-block"><?= $this->translate->_("Shipment Code"); ?> : ##SHIPCODE##</span>
                    <span class="help-block"><?= $this->translate->_("Scheme Type"); ?> : ##SHIPTYPE##</span>
                    <span class="help-block"><?= $this->translate->_("PT Survey Code"); ?> : ##SURVEYCODE##</span>
                    <span class="help-block"><?= $this->translate->_("PT Survey Date"); ?> : ##SURVEYDATE##</span>
                </div>
            </div>
            <div id="respond" style="margin: 0px auto 0px auto; text-align: center;" align="center">
                <input type="hidden" name="distributionId" id="distributionId" value="<?php echo $this->distributionId; ?>" />
                <input type="hidden" name="shipmentSlectedId" id="shipmentSlectedId" value="<?php echo $this->shipmentId; ?>" />
                <input name="submitbtn" class="btn btn-primary" type="button" onclick="validateNow();return false;" tabindex="7" value="Send" />
                <input class="btn btn-danger" type="button" onclick="window.location.href='/admin/index';" tabindex="8" value="Back" />
            </div>
        </fieldset>
    </form>
</div>

<script type="text/javascript" src="<?php echo $this->baseUrl('js/daterangepicker.js'); ?>"></script>
<!-- include summernote css/js -->
<script src="<?php echo $this->baseUrl('/assets/dist/js/app.js'); ?>"></script>
<link rel="stylesheet" type="text/css" href="<?php echo $this->baseUrl('css/summernote.min.css'); ?>">
<script type="text/javascript" src="<?php echo $this->baseUrl('js/summernote.min.js'); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl('js/bootstrap-select.min.js'); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl('js/select2.min.js'); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("js/jquery.multi-select.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("js/jquery.quicksearch.js"); ?>"></script>
<script type="text/javascript">
    var startDate = "";
    var endDate = "";

    function validateNow() {
        $("#message").val($("#messageEditor").summernote('code'));
        if ($('#shipments').val() == '') {
            alert("Please select schipment code and TO for sending the mails");
            return false;
        }
        if ($('#sendMail').val() == '') {
            alert("Please select schipment code and TO for sending the mails");
            return false;
        }
        if ($('#subject').val() == '') {
            alert("Please enter the mail subject");
            return false;
        }
        if ($.trim($('#message').val()) == '') {
            $('#message').val('');
            alert("Please enter the mail content");
            return false;
        }
        flag = deforayValidator.init({
            formId: 'emailParticipantForm'
        });
        if (flag) {
            $.blockUI();
            document.getElementById('emailParticipantForm').submit();
        }
    }
    $(document).ready(function() {
        /* $("#subject").select2({
            placeholder: "<?= $this->translate->_("Choose or enter subject"); ?>",
            minimumInputLength: 0,
            width: '100%',
            allowClear: true,
            ajax: {
                placeholder: "<?= $this->translate->_("Type subject to search"); ?>",
                url: "<?php echo $this->url(array('module' => 'admin', 'controller' => 'email-participants', 'action' => 'get-subject-list')); ?>",
                dataType: 'json',
                delay: 250,
                data: function(params) {
                    return {
                        search: params.term, // search term
                        page: params.page
                    };
                },
                processResults: function(data, params) {
                    params.page = params.page || 1;
                    return {
                        results: data.result,
                        pagination: {
                            more: (params.page * 30) < data.total_count
                        }
                    };
                },
                //cache: true
            },
            escapeMarkup: function(markup) {
                return markup;
            }
        }); */
        getShipmentCodes();
        $('#shipments, #sendMail').selectpicker();

        $('#messageEditor').summernote({
            placeholder: 'Please enter the Contact Information here',
            tabsize: 2,
            height: 200
        });

        $('#dateRange').daterangepicker({
                locale: {
                    cancelLabel: 'Clear',
                    format: 'DD-MMM-YYYY',
                    separator: ' to ',
                },
                autoApply: true,
                showDropdowns: true,
                alwaysShowCalendars: true,
                autoUpdateInput: true,
                startDate: moment().subtract(179, 'days'),
                endDate: moment(),
                maxDate: moment(),
                ranges: {
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                    'Last 60 Days': [moment().subtract(59, 'days'), moment()],
                    'Last 90 Days': [moment().subtract(89, 'days'), moment()],
                    'Last 180 Days': [moment().subtract(179, 'days'), moment()],
                    'Last 12 Months': [moment().subtract(12, 'month'), moment()],
                    'Last 18 Months': [moment().subtract(18, 'month'), moment()],
                }
            },
            function(start, end) {
                startDate = start.format('DD-MMM-YYYY');
                endDate = end.format('DD-MMM-YYYY');
            });
    });

    function getShipmentCodes() {
        $('#shipmentId').select2('data', null);

        $.blockUI();
        $.post("<?php echo $this->url(array('module' => 'reports', 'controller' => 'common', 'action' => 'get-shipments-by-date')); ?>", {
                startDate: startDate,
                endDate: endDate,
                distributionId: $("#distributionId").val(),
                notFinalized: false,
                format: "html"
            },
            function(data) {
                if (data == 0) {
                    shipmentCode = false;
                    $("#shipments").html('');
                } else {
                    $("#shipments").html(data);
                    if ($('#shipmentSlectedId').val() != '') {
                        $("#shipments").val($('#shipmentSlectedId').val());
                        $("#templates").val('not_participated');
                        fillTemplate($("#templates").val());
                    }

                    shipmentCode = true;
                }
                $("#shipments").selectpicker('refresh');

                $.unblockUI();
            });
    }

    function getSubjectList(obj) {
        $.blockUI();
        $.post("<?php echo $this->url(array('module' => 'admin', 'controller' => 'email-participants', 'action' => 'get-subject-list')); ?>", {
                search: obj.value,
                method: "post",
                format: "html"
            },
            function(data) {
                console.log(data);
                if (data != undefined && data != null && data != '' && data != '[]') {
                    if (confirm('<?= $this->translate->_("Do you want to replace the current content with content associated with this selected subject?"); ?>')) {
                        var list = JSON.parse(data);
                        autocomplete(obj, list);
                    }
                }
                $.unblockUI();
            });
    }

    function fillTemplate(value) {
        $.blockUI();
        $.post("<?php echo $this->url(array('module' => 'admin', 'controller' => 'email-participants', 'action' => 'get-mail-template')); ?>", {
                mailPurpose: value,
                format: "html"
            },
            function(data) {
                if (data != undefined && data != null && data != "") {
                    let obj = jQuery.parseJSON(data);
                    $('#subject').val(obj.subject);
                    let html = (obj.content + '<br><br>' + obj.footer);
                    $("#messageEditor").summernote('pasteHTML', html);
                }

                $.unblockUI();
            });
    }

    function fillTemplateBySubject() {
        // $.blockUI();
        $.post("<?php echo $this->url(array('module' => 'admin', 'controller' => 'email-participants', 'action' => 'get-mail-template-by-subject')); ?>", {
                subject: $('#subject').val(),
                format: "html"
            },
            function(data) {
                if (data != undefined && data != null && data != "") {
                    let obj = jQuery.parseJSON(data);
                    $(obj.receivers).each(function(index, item) {
                        $('#sendMail').val(item);
                    });
                    $('#sendMail').trigger('change');
                    $(obj.shipment).each(function(index, item) {
                        $('#shipments').val(item);
                    });
                    $('#shipments').trigger('change');
                    let html = (obj.content + '<br><br>');
                    $("#messageEditor").summernote('reset');
                    $("#messageEditor").summernote('pasteHTML', html);
                }

                $.unblockUI();
            });
    }

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) {
                return false;
            }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;

                        fillTemplateBySubject(this.getElementsByTagName("input")[0].value);
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });

        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }

        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }

        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function(e) {
            closeAllLists(e.target);
        });
    }
</script>